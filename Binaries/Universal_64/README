macOS Library for PCAN-USB Interfaces

Copyright (C) 2013-2022 by UV Software, Berlin


libPCBUSB
~~~~~~~~~

The PCBUSB library realizes a 'PCAN-USB Driver for macOS' using Apple´s IOUSBKit.
It supports up to 8 PCAN-USB or PCAN-USB FD devices from PEAK-System Technik.
See the header-file PCBUSB.h for details.

PCAN is a registered trademark of PEAK-System Technik GmbH, Darmstadt, Germany.
Mac and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.

This software is freeware without any warranty or support!

Change-Log:
- Version 0.11 of 01/31/2022:
  Synchronized PCBUSB header with PCANBasic header for v4.6.0.
  Fixed a bug with PCAN_CHANNEL_CONDITION when used by another process.
  Fixed an omission with export declaration for CAN_LookUpChannel.
  Implemented parameter PCAN_FIRMWARE_VERSION (read-only).
  Added error text for PCAN_ERROR_ILLMODE (all languages).
  Corrected some French error text (acc. to Peak´s changes).
  Return PCAN_ERROR_HWINUSE when interface is used by another process:
  - CAN_GetValue: PCAN_LISTEN_ONLY, PCAN_RECEIVE_STATUS, PCAN_LISTEN_ONLY
  Return PCAN_ERROR_ILLCLIENT if an invalid channel handle given:
  - CAN_GetValue: PCAN_RECEIVE_EVENT, PCAN_CHANNEL_CONDITION, PCAN_TRACE_LOCATION,
                  PCAN_TRACE_STATUS, PCAN_TRACE_SIZE, PCAN_TRACE_CONFIGURE,
                  PCAN_BITRATE_INFO, PCAN_BITRATE_INFO_FD, PCAN_BUSSPEED_NOMINAL,
                  PCAN_BUSSPEED_DATA, PCAN_FIRMWARE_VERSION
  - CAN_SetValue: PCAN_DEVICE_ID, PCAN_TRACE_LOCATION, PCAN_TRACE_STATUS,
                  PCAN_TRACE_SIZE, PCAN_TRACE_CONFIGURE
  - CAN_Reset, CAN_GetStatus , CAN_Read, CAN_ReadFD, CAN_Write, CAN_WriteFD
  * Peak-System harmonized its return codes in PCANBasic DLL version 4.6.0.
    Now the return codes matches my expectation.
  Added `@rpath` to the build environment (it got lost for some releases).
  Code signed the Universal macOS Binary (Apple Development certificate).
- Version 0.10.1 of 12/05/2021:
  Built library as Universal macOS Binary (macOS_Library_for_PCANUSB_v0.10.1.tar.gz).
  Built library for x86_64 architecture (OS_X_Library_for_PCANUSB_v0.10.1.tar.gz).
  Parameter PCAN_CHANNEL_VERSION displays machine architecture from utsname().
  Fixed a bug with parameter PCAN_EXT_HARDWARE_VERSION for PCAN-USB Pro FD device.
- Version 0.10 of 12/22/2020:
  Support of PCAN-USB Pro FD devices, but only the first channel (CAN1).
  Set linker options -install_name, -compatibility_version, and -current_version.
  Synchronized the API with Peak´s PCANBasic version 4.5.0.440
  Updated the Python example: reworked the output format.
- Version 0.9 of 06/25/2020:
  Data types from <MacTypes.h> as replacement for Peak´s usage of Windows BYTE,
  WORD, DWORD and UINT64 (field CAN ID is now 32-bit wide).
  Synchronized the API with Peak´s PCANBasic version 4.4.0.288
  Parameter PCAN_DEVICE_ID can be read in pre-initialization state.
  Fixed some bugs with status bit: PCAN_ERROR_QXMTFULL, PCAN_ERROR_XMTFULL,
  PCAN_ERROR_QOVERRUN, PCAN_ERROR_BUSLIGHT.
  Added a delay of 1 usec in CAN_Write to run on macOS 10.15 (Catalina).
- Version 0.8.1 of 09/27/2019:
  Adapted trace-file headers to Peak's changes in version 4.3.4.246
- Version 0.8 of 09/20/2017:
  Support of PCAN-USB FD devices in CAN 2.0 mode (CAN classic) and CAN FD mode!
  Adapted the API according to Peak's changes in version 4.2.0.134 and harmonized
  return codes with it.
  Fixed issue #208 'CAN_Write stuck when errors on the bus are present'.
  Conducted an intermediate solution for issue #246 (writing into a trace file).
  Added run-path-relative install name to the library (using the @rpath macro).
- Version 0.7 of 11/30/2016:
  Adapted the API according to Peak's changes in version 4.1.0.96 and harmonized
  return codes with it.
  Implemented parameter PCAN_CHANNEL_FEATURE and PCAN_BITRATE_INFO.
- Version 0.6 of 02/20/2015:
  Parameter PCAN_RECEIVE_EVENT returns a file descriptor to realize 'blocking
  read' by select() as on the Linux implementation of the PCAN-Basic API.
  Added two C++ examples and one Python example using the PCBUSB library.
- Version 0.5 of 11/23/2014:
  Feature 'Reading/Writing of parameter PCAN_DEVICE_NUMBER' implemented.
  Fixed issue #104 'Hot plugging was not detected by the library/driver'.
  Fixed issue #117 'Permission for libPCBUSB.x.y.lib wrong' (chmod 755).
  Return codes of API functions harmonized with PCANBasic.dll (1.3.3.61).
- Version 0.4 of 02/23/2014:
  Time-stamps are now taken from CAN controller instead of taking them from the
  system clock.
  Getting and setting of PCAN_* parameters reworked (to be almost compatible to
  the PCANBasic DLL, version 1.3)
  Resetting of RCV and XMT queue on the CAN controller realized.
- Version 0.3 of 11/02/2013:
  Fixed issue #11 'All channel initialized by the application will be closed
  even if they are in use'.
  CAN_Unitialize: closing all channel initialized by the application at once
  implemented.
  CAN_Read: receive queue overrun handling reworked.
  CAN_*: wrong function return codes corrected.
  CAN_GetErrorText: language support for English, German, French, Italian and
  Spanish added.
- Version 0.2 of 09/08/2013:
  Minor changes
- Version 0.1 of 06/30/2013:
  Initial revision

Limitations:
- CAN_Initialize:
  Only the following devices are supported:
  - PCAN-USB (item no. IPEH-002021 and IPEH-002022)
  - PCAN-USB FD (item no. IPEH-004022)
  - PCAN-USB Pro FD (item no. IPEH-004061), but only the first channel (CAN1)
- CAN_Write:
  Transmission of the given message on the CAN bus is not acknowledged by
  the USB interface.
- CAN_FilterMessages:
  Message filtering is currently not supported.
- CAN_GetValue:
  Still unsupported parameter are: PCAN_5VOLTS_POWER, PCAN_MESSAGE_FILTER,
  PCAN_BUSOFF_AUTORESET, PCAN_LOG_LOCATION, PCAN_LOG_STATUS, PCAN_LOG_CONFIGURE,
  PCAN_LOG_TEXT, PCAN_CONTROLLER_NUMBER, PCAN_CHANNEL_IDENTIFYING,
  PCAN_BITRATE_ADAPTING, PCAN_IP_ADDRESS, PCAN_LAN_SERVICE_STATUS,
  PCAN_ALLOW_STATUS_FRAMES, PCAN_ALLOW_RTR_FRAMES, PCAN_ALLOW_ERROR_FRAMES,
  PCAN_INTERFRAME_DELAY, PCAN_ACCEPTANCE_FILTER_11BIT, PCAN_ACCEPTANCE_FILTER_29BIT,
  PCAN_IO_DIGITAL_CONFIGURATION, PCAN_IO_DIGITAL_VALUE, PCAN_IO_ANALOG_VALUE,
  PCAN_ATTACHED_CHANNELS_COUNT, PCAN_ATTACHED_CHANNELS,
  PCAN_ALLOW_ECHO_FRAMES, PCAN_DEVICE_PART_NUMBER.
- CAN_SetValue:
  Still unsupported parameter are: PCAN_5VOLTS_POWER, PCAN_RECEIVE_EVENT,
  PCAN_MESSAGE_FILTER, PCAN_BUSOFF_AUTORESET, PCAN_LOG_LOCATION, PCAN_LOG_STATUS,
  PCAN_LOG_CONFIGURE, PCAN_LOG_TEXT, PCAN_RECEIVE_STATUS, PCAN_CHANNEL_IDENTIFYING,
  PCAN_BITRATE_ADAPTING, PCAN_ALLOW_STATUS_FRAMES, PCAN_ALLOW_RTR_FRAMES,
  PCAN_ALLOW_ERROR_FRAMES, PCAN_INTERFRAME_DELAY, PCAN_ACCEPTANCE_FILTER_11BIT,
  PCAN_ACCEPTANCE_FILTER_29BIT, PCAN_IO_DIGITAL_CONFIGURATION, PCAN_IO_DIGITAL_VALUE,
  PCAN_IO_DIGITAL_SET, PCAN_IO_DIGITAL_CLEAR, PCAN_ALLOW_ECHO_FRAMES.
- CAN_LookUpChannel:
  Channel searching is currently not supported.
- Writing into a trace file:
  Only 100'000 frames can be recorded into one trace file.
  An existing trace file with the same file name will be overwritten.

Known bugs and caveats
- The LED of the PCAN-USB FD device is not turned on (green) when the device
  is plugged into the USB bus. This is due to the fact that there is no 'real'
  driver for PCAN-USB devices under macOS. So the LED of the PCAN-USB FD device
  cannot signal the presence of a driver. When operating the LED signals the
  correct operation state of the PCAN-USB FD device (blinking green, or red
  on error).
- The same LED issue is for the PCAN-USB Pro FD device. The LED for the first
  channel signals its operation state only when operated by an application.
- The second channel of the PCAN-USB Pro FD device is not supported by the
  driver. It is not listed in the device list; its LED is turned off.
- The device number cannot be changed for PCAN-USB FD devices and PCAN-USB Pro
  FD devices (function CAN_SetValue, parameter PCAN_DEVICE_ID).
- When a device is used by another process this cannot be detected by a call
  to CAN_GetValue with parameter PCAN_CHANNEL_CONDITION. The occupied device
  is shown as PCAN_CHANNEL_AVAILABLE to the own process.
- When a successfully initialized PCAN-USB device is physically removed from
  USB any subsequent call of API functions (e.g. CAN_Read) will not succeed
  even when the device is plugged in again. An error code will be returned in
  this case.
- Due to the latency between the completions of the isochronous transaction on
  the USB bus and servicing of the callback function, on slowed down systems a
  mysterious repetition of already processed URBs may occur. In this case speed
  up your system and everything works fine.


Contact
~~~~~~~

E-Mail:  mailto:info@mac-can.com
Internet: http://www.mac-can.com
